00001  0000             ; 10 SYS (2304)
00002  0001             
00003  0001             *=$0801
00004  0801             
00005  0801  0E 08 0A              BYTE    $0E, $08, $0A, $00, $9E, $20, $28
00006  0808  32 33 30              BYTE    $32, $33, $30, $34, $29, $00, $00, $00
00007  0810             
00008  0810             ;*******************************************************************************
00009  0810             ;* TUTORIAL EIGHT (ASL, ROL, SBC ) 16 BIT DIVIDER                              *
00010  0810             ;*                                                                             *
00011  0810             ;* WRITTEN BY JOHN C. DALE                                                     *
00012  0810             ;* TUTORIAL #12                                                                *
00013  0810             ;* DATE : 19TH FEB, 2017                                                       *
00014  0810             ;*                                                                             *
00015  0810             ;*******************************************************************************
00016  0810             ;*                                                                             *
00017  0810             ;*******************************************************************************
00018  0810             
00019  0810             *=$0900
00020  0900  4C 9E 0A              JMP DIVIDE
00021  0903             
00022  0903             ;*******************************************************************************
00023  0903             ;*                                                                             *
00024  0903             ;* ASSEMBLY INCLUDES                                                           *
00025  0903             ;*                                                                             *
00026  0903             ;*******************************************************************************
00027  0903             
00028  0903             ; ---------------------------------------------------------------------
00029  0903             ; - CHARACTER ASCII SET CONSTANTS
00030  0903             ; - DATE 26TH NOVEMBER 2016
00031  0903             ; - CREATED BY JOHN C. DALE
00032  0903             ; ---------------------------------------------------------------------
00033  0903             
00034  0903             CHR_WHITE  = 5
00035  0903             CHR_DISABLECOMMODOREKEY = 8
00036  0903             CHR_ENABLECOMMODOREKEY = 9
00037  0903             CHR_RETURN = 13
00038  0903             CHR_SWITCHTOLOWERCASE = 14
00039  0903             CHR_CURSORUP = 17
00040  0903             CHR_REVERSEON = 18
00041  0903             CHR_HOME   = 19
00042  0903             CHR_OVERWRITE = 20
00043  0903             CHR_RED    = 28
00044  0903             CHR_CURSORRIGHT = 29
00045  0903             CHR_GREEN  = 30
00046  0903             CHR_BLUE   = 31
00047  0903             CHR_SPACE  = 32
00048  0903             CHR_SHIFTRETURN = 141
00049  0903             CHR_SWITCHTOUPPERCASE = 142
00050  0903             CHR_BLACK  = 144
00051  0903             CHR_CURSORDOWN = 145
00052  0903             CHR_REVERSEOFF = 146
00053  0903             CHR_CLEARSCREEN = 147
00054  0903             CHR_INSERT = 148
00055  0903             CHR_PURPLE = 156
00056  0903             CHR_CURSORLEFT = 157
00057  0903             CHR_YELLOW = 158
00058  0903             CHR_CYAN   = 159
00059  0903             CHR_SHIFTSPACE = 160
00060  0903             
00061  0903             ;*******************************************************************************
00062  0903             ;*                                                                             *
00063  0903             ;* TUTORIAL ROUTINES                                                           *
00064  0903             ;*                                                                             *
00065  0903             ;*******************************************************************************
00066  0903             ;* THIS HAS GENERAL ROUTINES FOR THE TUTORIALS                                 *
00067  0903             ;*******************************************************************************
00068  0903             ;*  INPUTS : NONE                                                              *
00069  0903             ;*  OUTPUTS : NONE                                                             *
00070  0903             ;*          : NONE                                                             *
00071  0903             ;*******************************************************************************
00072  0903             ;* VARIABLES                                                                   *
00073  0903             PRINT=$FFD2 
00074  0903             BASIN=$FFCF 
00075  0903             FROMNUM=$B79E 
00076  0903             GETLINE=$A560 
00077  0903             
00078  0903             ADDLO=247
00079  0903             ADDHI=248
00080  0903             HTLO=$14
00081  0903             HTHI=$15
00082  0903             
00083  0903             ;*******************************************************************************
00084  0903             ;* MARCOS                                                                      *
00085  0903             DEFM       PRINTTEXT
00086  0903                        LDY #>/1             ; LOAD HI BYTE TO Y
00087  0903                        LDA #</1             ; LOAD LO BYTE TO ACC.
00088  0903                        JSR STRING           ; PRINT THE TEXT UNTIL HIT ZERO
00089  0903             
00090  0903             
00091  0903             ;*******************************************************************************
00092  0903             ;*                                                                             *
00093  0903             ;* GETNUMBER                                                                   *
00094  0903             ;*                                                                             *
00095  0903             ;*******************************************************************************
00096  0903             ;* THIS ASKS THE USER TO IMPUT AN NUMBER BETWEEN 0 AND 255                     *
00097  0903             ;*******************************************************************************
00098  0903             ;*  INPUTS : NONE                                                              *
00099  0903             ;*  OUTPUTS : X REGISTER CONTAINS LO BYTE                                      *
00100  0903             ;*          : ACC REGISTER CONTAINS HI BYTE                                    *
00101  0903             ;*******************************************************************************
00102  0903             ;* VARIABLES                                                                   *
00103  0903             ;*******************************************************************************
00104  0903             ;* CODE                                                                        *
00105  0903             GETNUMBER
00106  0903  20 60 A5              JSR GETLINE
00107  0906  A9 01                 LDA #1
00108  0908  A2 FF                 LDX #$FF
00109  090A  85 7B                 STA $7B
00110  090C  86 7A                 STX $7A
00111  090E  20 73 00              JSR $0073          ; 8-BIT NUMBER
00112  0911  20 9E B7              JSR $B79E          ; 8-BIT NUMBER
00113  0914  60                    RTS
00114  0915             
00115  0915             ;*******************************************************************************
00116  0915             ;*                                                                             *
00117  0915             ;* GET16BITNUMBER                                                              *
00118  0915             ;*                                                                             *
00119  0915             ;*******************************************************************************
00120  0915             ;* THIS ASKS THE USER TO INPUT AN NUMBER BETWEEN 0 AND 65535                   *
00121  0915             ;*******************************************************************************
00122  0915             ;*  INPUTS : NONE                                                              *
00123  0915             ;*  OUTPUTS : X IS LO BYTE                                                   *
00124  0915             ;*          : ACC IS HI BYTE                                                   *
00125  0915             ;*******************************************************************************
00126  0915             ;* VARIABLES                                                                   *
00127  0915             ;*******************************************************************************
00128  0915             ;* CODE                                                                        *
00129  0915             GET16BITNUMBER 
00130  0915  20 60 A5              JSR GETLINE
00131  0918  A9 01                 LDA #1
00132  091A  A2 FF                 LDX #$FF
00133  091C  85 7B                 STA $7B
00134  091E  86 7A                 STX $7A
00135  0920  20 73 00              JSR $0073          ; 16-BIT NUMBER
00136  0923  20 8A AD              JSR $AD8A
00137  0926  20 F7 B7              JSR $B7F7          ; 16-BIT NUMBER
00138  0929                        ;JSR $A96B
00139  0929  A6 14                 LDX $14
00140  092B  A5 15                 LDA $15
00141  092D  60                    RTS
00142  092E             
00143  092E             
00144  092E             
00145  092E             ;*******************************************************************************
00146  092E             ;*                                                                             *
00147  092E             ;* PRINTACCUMLATOR                                                             *
00148  092E             ;*                                                                             *
00149  092E             ;*******************************************************************************
00150  092E             ;* THIS PRINTS THE NUMBER FROM THE ACCUMULATOR TO BINARY / HEX / DECIMAL       *
00151  092E             ;*******************************************************************************
00152  092E             ;*  INPUTS : ACCUMULATOR : NUMBER TO PRINT OUT                                 *
00153  092E             ;*******************************************************************************
00154  092E             ;* VARIABLES                                                                   *
00155  092E             STATUSSTATE 
00156  092E  00                    BRK
00157  092F             NUMBERTOPRINT 
00158  092F  00                    BRK
00159  0930             NUMBERTOWORK 
00160  0930  00                    BRK
00161  0931             ;*******************************************************************************
00162  0931             ;* CODE                                                                        *
00163  0931             PRINTACCUMLATOR 
00164  0931  08                    PHP
00165  0932  8D 2F 09              STA NUMBERTOPRINT       ; STORE AWAY THE ACCUMULATOR
00166  0935  68                    PLA                     ; PULL STATUS FROM STACK
00167  0936  8D 2E 09              STA STATUSSTATE         ; STORE STATUS
00168  0939  48                    PHA
00169  093A  48                    PHA                     ; PUSH THE ACC TO STACK
00170  093B  8A                    TXA                     ; MOVE X TO ACC.
00171  093C  48                    PHA                     ; PUSH ACC (X) TO STACK
00172  093D  98                    TYA                     ; MOVE Y TO ACC.
00173  093E  48                    PHA                     ; PUSH ACC (Y) TO STACK
00174  093F  A0 09                 LDY #>RGTXT             ; LOAD HI BYTE TO Y
00175  0941  A9 8C                 LDA #<RGTXT             ; LOAD LO BYTE TO ACC.
00176  0943  20 72 09              JSR STRING              ; PRINT THE TEXT UNTIL HIT ZERO
00177  0946             
00178  0946  AD 2E 09              LDA STATUSSTATE
00179  0949  20 AD 09              JSR STATUS_REGISTER
00180  094C  20 68 09              JSR SPACE
00181  094F  20 C8 09              JSR BINPRINT            ; PRINT BINARY ARRAY FOR NUMBERTOPRINT
00182  0952  20 68 09              JSR SPACE               ; ADD A SPACE
00183  0955  20 0B 0A              JSR HEXADECIMALPRINT    ; PRINT HEXADECIMAL FOR NUMBERTOPRINT
00184  0958  20 68 09              JSR SPACE               ; ADD A SPACE
00185  095B  20 E3 09              JSR DECIMALPRINT        ; PRINT DECIMAL FOR NUMBERTOPRINT
00186  095E  20 6D 09              JSR CARRAGERETURN
00187  0961  68                    PLA                     ; PULL ACC (Y) OFF STACK
00188  0962  A8                    TAY                     ; MOVE ACC. TO Y
00189  0963  68                    PLA                     ; PULL ACC (X) OFF STACK
00190  0964  AA                    TAX                     ; MOVE ACC. TO X
00191  0965  68                    PLA                     ; PULL ACC OFF STACK
00192  0966  28                    PLP
00193  0967  60                    RTS                     ; RETURN BACK
00194  0968             
00195  0968             ;*******************************************************************************
00196  0968             
00197  0968             ;*******************************************************************************
00198  0968             ;*                                                                             *
00199  0968             ;* SPACE                                                                       *
00200  0968             ;*                                                                             *
00201  0968             ;*******************************************************************************
00202  0968             ;* THIS ROTUINES PRINTS A SPACE ON THE SCREEN                                  *
00203  0968             ;*******************************************************************************
00204  0968             ;*  INPUTS : NONE                                                              *
00205  0968             ;*******************************************************************************
00206  0968             ;* VARIABLES                                                                   *
00207  0968             ;*******************************************************************************
00208  0968             ;* CODE                                                                        *
00209  0968             SPACE
00210  0968  A9 20                 LDA #CHR_SPACE          ; LOAD SPACE CHARACTER
00211  096A  4C D2 FF              JMP PRINT               ; PRINT THIS CHARACTER
00212  096D             ;*******************************************************************************
00213  096D             
00214  096D             ;*******************************************************************************
00215  096D             ;*                                                                             *
00216  096D             ;* CARRAGERETURN                                                               *
00217  096D             ;*                                                                             *
00218  096D             ;*******************************************************************************
00219  096D             ;* THIS ROTUINES PRINTS A SPACE ON THE SCREEN                                  *
00220  096D             ;*******************************************************************************
00221  096D             ;*  INPUTS : NONE                                                              *
00222  096D             ;*******************************************************************************
00223  096D             ;* VARIABLES                                                                   *
00224  096D             ;*******************************************************************************
00225  096D             ;* CODE                                                                        *
00226  096D             CARRAGERETURN 
00227  096D  A9 0D                 LDA #CHR_RETURN         ; LOAD RETURN CHARACTER
00228  096F  4C D2 FF              JMP PRINT               ; PRINT THIS CHARACTER
00229  0972             ;*******************************************************************************
00230  0972             
00231  0972             ;*******************************************************************************
00232  0972             ;*                                                                             *
00233  0972             ;* STRING                                                                      *
00234  0972             ;*                                                                             *
00235  0972             ;*******************************************************************************
00236  0972             ;* THIS ROUTINE PRINTS A STRING OF CHARACTERS TERMINATING IN A ZERO BYTE       *
00237  0972             ;*******************************************************************************
00238  0972             ;*  INPUTS : ACCUMULATOR : LO BYTE ADDRESS OF STRING                           *
00239  0972             ;*         : Y REGISTER  : HI BYTE ADDRESS OF STRING                           *
00240  0972             ;*******************************************************************************
00241  0972             ;* VARIABLES                                                                   *
00242  0972             ;*******************************************************************************
00243  0972             ;* CODE                                                                        *
00244  0972             STRING
00245  0972  85 14                 STA HTLO                ; STORE LO BYTE ADDRESS OF STRING
00246  0974  84 15                 STY HTHI                ; STORE HI BYTE ADDRESS OF STRING
00247  0976             STRING_NXTCHR 
00248  0976  A0 00                 LDY #0                  ; INITIALISE INDEX Y
00249  0978  B1 14                 LDA (HTLO),Y            ; LOAD CHARACTER AT ADDRESS + Y
00250  097A  C9 00                 CMP #0                  ; IS IT ZERO?
00251  097C  F0 0D                 BEQ STRING_RTS          ; IF ZERO, GOTO END OF ROUTINE
00252  097E  20 D2 FF              JSR PRINT               ; PRINT THIS CHARACTER
00253  0981  18                    CLC                     ; CLEAR THE CARRY
00254  0982  E6 14                 INC HTLO                ; INCREASE LO BYTE
00255  0984  D0 F0                 BNE STRING_NXTCHR       ; BRANCH AWAY IF PAGE NOT CROSSED
00256  0986  E6 15                 INC HTHI                ; INCREASE HI BYTE
00257  0988  4C 76 09              JMP STRING_NXTCHR       ; JUMP BACK TO GET NEXT CHARACTER
00258  098B             STRING_RTS 
00259  098B  60                    RTS                     ; RETURN BACK
00260  098C             ;*******************************************************************************
00261  098C             
00262  098C             RGTXT
00263  098C  0D                    BYTE CHR_RETURN
00264  098D  4E 56 2D              TEXT "NV-BDIZC BINARY    HEX   DEC."
00265  09AA  0D                    BYTE CHR_RETURN
00266  09AB  00                    BRK
00267  09AC             
00268  09AC             ;*******************************************************************************
00269  09AC             ;*                                                                             *
00270  09AC             ;* STATUS_REGISTER                                                             *
00271  09AC             ;*                                                                             *
00272  09AC             ;*******************************************************************************
00273  09AC             ;* THIS ROUTINE PRINTS THE CONTENTS OF THE STATUS REGISTER                     *
00274  09AC             ;*******************************************************************************
00275  09AC             ;*  INPUTS : ACCUMULATOR : STATUS REGISTER                                     *
00276  09AC             ;*******************************************************************************
00277  09AC             ;* VARIABLES                                                                   *
00278  09AC             STREG
00279  09AC  00                    BRK
00280  09AD             ;*******************************************************************************
00281  09AD             ;* CODE                                                                        *
00282  09AD             STATUS_REGISTER 
00283  09AD  A0 00                 LDY #0                  ; INITIALISE Y REGISTER
00284  09AF             STREG1
00285  09AF  8D AC 09              STA STREG               ; STORE ACC. INTO STATUS REGISTER VARIABLE
00286  09B2             STREG3     
00287  09B2  0E AC 09              ASL STREG               ; LOGICALLY SHIFT THE ACC LEFT, AND CARRY SET OR NOT
00288  09B5  A9 00                 LDA #0                  ; LOAD ZERO INTO ACCU.
00289  09B7  69 30                 ADC #"0"                ; ADD "0" TO ACC. WITH  CARRY
00290  09B9  C0 02                 CPY #2                  ; IS Y = 2
00291  09BB  D0 02                 BNE STREG2              ; IF YES, BRANCH PAST THE '-' SYMBOL
00292  09BD  A9 2D                 LDA #"-"                ; LOAD ACC WITH "-"
00293  09BF             STREG2
00294  09BF  20 D2 FF              JSR PRINT               ; PRINT THE CONTENTS OF THE ACC
00295  09C2  C8                    INY                     ; INCREASE THE INDEX Y
00296  09C3  C0 08                 CPY#8                   ; TEST FOR 8 (8TH BIT OF THE NUMBER)
00297  09C5  D0 EB                 BNE STREG3              ; BRANCH IF NOT EQUAL BACK TO NEXT BIT
00298  09C7  60                    RTS                     ; RETURN BACK
00299  09C8             ;*******************************************************************************
00300  09C8             
00301  09C8             ;*******************************************************************************
00302  09C8             ;*                                                                             *
00303  09C8             ;* BINPRINT                                                                    *
00304  09C8             ;*                                                                             *
00305  09C8             ;*******************************************************************************
00306  09C8             ;* THIS ROUTINE PRINTS THE CONTENTS NUMBERTOPRINT AS A BINARY NUMBER           *
00307  09C8             ;*******************************************************************************
00308  09C8             ;*  INPUTS : NONE                                                              *
00309  09C8             ;*******************************************************************************
00310  09C8             ;* VARIABLES                                                                   *
00311  09C8             ;*******************************************************************************
00312  09C8             ;* CODE                                                                        *
00313  09C8             BINPRINT
00314  09C8  20 03 0A              JSR PRPERCENT           ; PRINT "%"
00315  09CB  A0 00                 LDY #0                  ; INITIALISE Y INDEX REGISTER WITH ZERO
00316  09CD  AD 2F 09              LDA NUMBERTOPRINT       ; LOAD ACC WITH NUMBER TO PRINT
00317  09D0  8D 30 09              STA NUMBERTOWORK        ; STORE ACC TO NUMBER TO WORK
00318  09D3             BINPR4
00319  09D3  0E 30 09              ASL NUMBERTOWORK        ; LOGICALLY SHIFT LEFT NUMBER TO WORK INTO CARRY
00320  09D6  A9 00                 LDA #0                  ; LOAD ACC WITH ZERO
00321  09D8  69 30                 ADC #"0                 ; ADD ACC WITH "0" PLUS CARRY
00322  09DA  20 D2 FF              JSR PRINT               ; PRINT THIS CHARACTER EITHER '0' OT '1'
00323  09DD  C8                    INY                     ; INCREASE Y INDEX
00324  09DE  C0 08                 CPY #8                  ; HAVE WE HIT BIT 8?
00325  09E0  D0 F1                 BNE BINPR4              ; NO, GET NEXT BIT
00326  09E2  60                    RTS                     ; RETURN BACK
00327  09E3             ;*******************************************************************************
00328  09E3             
00329  09E3             
00330  09E3             ;*******************************************************************************
00331  09E3             ;*                                                                             *
00332  09E3             ;* DECIMALPRINT                                                                *
00333  09E3             ;*                                                                             *
00334  09E3             ;*******************************************************************************
00335  09E3             ;* THIS ROUTINE PRINTS THE CONTENTS NUMBERTOPRINT AS A DECIMAL NUMBER          *
00336  09E3             ;*******************************************************************************
00337  09E3             ;*  INPUTS : NONE                                                              *
00338  09E3             ;*******************************************************************************
00339  09E3             ;* VARIABLES                                                                   *
00340  09E3             ;*******************************************************************************
00341  09E3             ;* CODE                                                                        *
00342  09E3             DECIMALPRINT 
00343  09E3  20 06 0A              JSR PRHASH              ; PRINT "#"
00344  09E6  A9 00                 LDA #$00                ; INITIALISE ACC WITH ZERO
00345  09E8  AE 2F 09              LDX NUMBERTOPRINT       ; LOAD X REGISTER WITH NUMBERTOPRINT
00346  09EB  8E 30 09              STX NUMBERTOWORK        ; STORE X REGISTER TO NUMBERTOWORK
00347  09EE  4C CD BD              JMP $BDCD               ; JUMP TO BASIC DECIMAL NUMBER PRINT ROUTINE
00348  09F1             ;*******************************************************************************
00349  09F1             
00350  09F1             PRDOLLAR
00351  09F1  A9 24                 LDA #"$"
00352  09F3  2C                    BYTE 44
00353  09F4             PRBRACKETOPEN 
00354  09F4  A9 28                 LDA #"("
00355  09F6  2C                    BYTE 44
00356  09F7             PRBRACKETCLOSED 
00357  09F7  A9 29                 LDA #")"
00358  09F9  2C                    BYTE 44
00359  09FA             PRCOMMA
00360  09FA  A9 2C                 LDA #","
00361  09FC  2C                    BYTE 44
00362  09FD             PRX
00363  09FD  A9 58                 LDA #"X"
00364  09FF  2C                    BYTE 44
00365  0A00             PRY
00366  0A00  A9 59                 LDA #"Y"
00367  0A02  2C                    BYTE 44
00368  0A03             PRPERCENT  
00369  0A03  A9 25                 LDA #"%"
00370  0A05  2C                    BYTE 44
00371  0A06             PRHASH
00372  0A06  A9 23                 LDA #"#"
00373  0A08  4C D2 FF              JMP PRINT
00374  0A0B             
00375  0A0B             ;*******************************************************************************
00376  0A0B             ;*                                                                             *
00377  0A0B             ;* HEXADECIMALPRINT                                                            *
00378  0A0B             ;*                                                                             *
00379  0A0B             ;*******************************************************************************
00380  0A0B             ;* THIS ROUTINE PRINTS THE CONTENTS NUMBERTOPRINT AS A HEXADECIMAL NUMBER      *
00381  0A0B             ;*******************************************************************************
00382  0A0B             ;*  INPUTS : NONE                                                              *
00383  0A0B             ;*******************************************************************************
00384  0A0B             ;* VARIABLES                                                                   *
00385  0A0B             ;*******************************************************************************
00386  0A0B             ;* CODE                                                                        *
00387  0A0B             HEXADECIMALPRINT 
00388  0A0B  20 F1 09              JSR PRDOLLAR            ; PRINT A "$"
00389  0A0E  A2 00                 LDX #$00                ; INITIALISE X REGISTER WITH ZERO
00390  0A10  AD 2F 09              LDA NUMBERTOPRINT       ; LOAD ACC WITH NUMBERTOPRINT
00391  0A13  8D 30 09              STA NUMBERTOWORK        ; STORE ACC TO NUMBERTOPRINT
00392  0A16  4C 19 0A              JMP PBYTE2              ; JUMP TO HEXADECIMAL ROUTINE
00393  0A19             ;*******************************************************************************
00394  0A19             
00395  0A19             ;*******************************************************************************
00396  0A19             ;*                                                                             *
00397  0A19             ;* PBYTE2                                                                      *
00398  0A19             ;*                                                                             *
00399  0A19             ;*******************************************************************************
00400  0A19             ;* THIS ROUTINE EVALUATES AND PRINTS A FOUR CHARACTER HEXADECIMAL NUMBER       *
00401  0A19             ;*******************************************************************************
00402  0A19             ;*  INPUTS : ACCUMULATOR : LO BYTE OF THE NUMBER TO BE CONVERTED               *
00403  0A19             ;*           X REGISTER  : HI BYTE OF THE NUMBER TO BE CONVERTED               *
00404  0A19             ;*******************************************************************************
00405  0A19             ;* VARIABLES                                                                   *
00406  0A19             ;*******************************************************************************
00407  0A19             ;* CODE                                                                        *
00408  0A19             PBYTE2
00409  0A19  48                    PHA                     ; PUSH ACC TO THE STACK
00410  0A1A  8A                    TXA                     ; TANSFER X REGISTER TO ACC
00411  0A1B  20 1F 0A              JSR PBYTE1              ; EXECUTE 2 DIGIT HEXADECIMAL CONVERTOR
00412  0A1E  68                    PLA                     ; PULL ACC FROM STACK
00413  0A1F             PBYTE1
00414  0A1F  48                    PHA                     ; PUSH ACC TO THE STACK
00415  0A20                        ; CONVERT ACC INTO A NIBBLE TOP '4 BITS'
00416  0A20  4A                    LSR                     ; LOGICALLY SHIFT RIGHT ACC
00417  0A21  4A                    LSR                     ; LOGICALLY SHIFT RIGHT ACC
00418  0A22  4A                    LSR                     ; LOGICALLY SHIFT RIGHT ACC
00419  0A23  4A                    LSR                     ; LOGICALLY SHIFT RIGHT ACC
00420  0A24  20 2B 0A              JSR PBYTE               ; EXECUTE 1 DIGIT HEXADECIMAL NUMBER
00421  0A27  AA                    TAX                     ; TRANSFER ACC BACK INTO X REGISTER
00422  0A28  68                    PLA                     ; PULL ACC FROM THE STACK
00423  0A29  29 0F                 AND #15                 ; AND WITH %00001111 TO FILTER OUT LOWER NIBBLE
00424  0A2B             PBYTE
00425  0A2B  18                    CLC                     ; CLEAR THE CARRY
00426  0A2C                        ; PERFORM TEST WEATHER NUMBER IS GREATER THAN 10
00427  0A2C  69 F6                 ADC #$F6                ; ADD #$F6 TO ACC WITH CARRY
00428  0A2E  90 02                 BCC PBYTE_SKIP          ; BRANCH IS CARRY  IS STILL CLEAR
00429  0A30  69 06                 ADC #6                  ; ADD #$06 TO ACC TO ALIGN PETSCII CHARACTER 'A'
00430  0A32             PBYTE_SKIP 
00431  0A32  69 3A                 ADC #$3A                ; ADD #$3A TO ALIGN FOR PETSCII CHARACTER '0'
00432  0A34  4C D2 FF              JMP PRINT               ; JUMP TO THE PRINT ROUTINE FOR THAT CHARACTER
00433  0A37             ;*******************************************************************************
00434  0A37             
00435  0A37             ;*******************************************************************************
00436  0A37             ;* STRINGS                                                                     *
00437  0A37             ENTERNUMBERTXT 
00438  0A37  50 4C 45              TEXT "PLEASE ENTER A NUMBER?"
00439  0A4D  00                    BRK
00440  0A4E             
00441  0A4E             ENTERDIVIDERTXT 
00442  0A4E  45 4E 54              TEXT "ENTER NUMBER TO DIVIDED BY?"
00443  0A69  00                    BRK
00444  0A6A             
00445  0A6A             THEANSWERISTXT 
00446  0A6A  41 4E 44              TEXT "AND THE RESULT IS : "
00447  0A7E  00                    BRK
00448  0A7F             
00449  0A7F             WITHREMAINDERTXT 
00450  0A7F  57 49 54              TEXT "WITH THE REMAINDER OF : "
00451  0A97  00                    BRK
00452  0A98             
00453  0A98             ;*******************************************************************************
00454  0A98             ;* DIVISION 16 BIT TO 16 BIT                                                   *
00455  0A98             ;*                                                                             *
00456  0A98             ;* WRITTEN BY JOHN C. DALE                                                     *
00457  0A98             ;* TUTORIAL #12                                                                *
00458  0A98             ;* DATE : 19TH FEB, 2017                                                       *
00459  0A98             ;*                                                                             *
00460  0A98             ;*******************************************************************************
00461  0A98             ;*                                                                             *
00462  0A98             ;*******************************************************************************
00463  0A98             
00464  0A98             ;*******************************************************************************
00465  0A98             ;* VARIABLES                                                                   *
00466  0A98             DIVISOR    
00467  0A98  00 00                 WORD 0
00468  0A9A             DIVIDEND   
00469  0A9A  00 00                 WORD 0
00470  0A9C             REMAINDER
00471  0A9C  00 00                 WORD 0
00472  0A9E             RESULT     = DIVIDEND ;SAVE MEMORY BY REUSING DIVIDENT TO STORE THE RESULT
00473  0A9E             
00474  0A9E             ;*******************************************************************************
00475  0A9E             ;* CODE                                                                        *
00476  0A9E             DIVIDE
00477  0A9E  20 6D 09              JSR CARRAGERETURN           ; ADD A SCREEN LINE
00478  0AA1             
00479  0AA1             
00480  0AA1  A0 0A                 LDY #>ENTERNUMBERTXT
00481  0AA3  A9 37                 LDA #<ENTERNUMBERTXT
00482  0AA5  20 72 09              JSR STRING
00483  0AA8  20 15 09              JSR GET16BITNUMBER          ; GET THE 16 BIT NUMBER
00484  0AAB  8E 9A 0A              STX DIVIDEND
00485  0AAE  8D 9B 0A              STA DIVIDEND+1
00486  0AB1  20 6D 09              JSR CARRAGERETURN           ; ADD A SCREEN LINE
00487  0AB4             
00488  0AB4             
00489  0AB4  A0 0A                 LDY #>ENTERDIVIDERTXT
00490  0AB6  A9 4E                 LDA #<ENTERDIVIDERTXT
00491  0AB8  20 72 09              JSR STRING
00492  0ABB  20 03 09              JSR GETNUMBER               ; GET 8 BIT NUMBER
00493  0ABE  8E 98 0A              STX DIVISOR                 ; STORE IN DIVISOR
00494  0AC1  A9 00                 LDA #0                      ; PRESET REMAINDER TO 0
00495  0AC3  8D 9C 0A              STA REMAINDER               ; INITIALISE REMAINDER
00496  0AC6  8D 9D 0A              STA REMAINDER + 1
00497  0AC9             
00498  0AC9  A2 10                 LDX #16                     ; REPEAT FOR EACH BIT: ...
00499  0ACB             DIVLOOP    
00500  0ACB  0E 9A 0A              ASL DIVIDEND                ; DIVIDEND LB & HB*2, MSB -> CARRY
00501  0ACE  2E 9B 0A              ROL DIVIDEND+1
00502  0AD1  2E 9C 0A              ROL REMAINDER               ; REMAINDER LB & HB * 2 + MSB FROM CARRY
00503  0AD4  2E 9D 0A              ROL REMAINDER+1
00504  0AD7  AD 9C 0A              LDA REMAINDER
00505  0ADA  38                    SEC
00506  0ADB  ED 98 0A              SBC DIVISOR                 ; SUBSTRACT DIVISOR TO SEE IF IT FITS IN
00507  0ADE  A8                    TAY                         ; LB RESULT -> Y, FOR WE MAY NEED IT LATER
00508  0ADF  AD 9D 0A              LDA REMAINDER+1
00509  0AE2  ED 99 0A              SBC DIVISOR+1
00510  0AE5  90 0E                 BCC SKIP                    ; IF CARRY=0 THEN DIVISOR DIDN'T FIT IN YET
00511  0AE7             
00512  0AE7  8D 9D 0A              STA REMAINDER+1             ; ELSE SAVE SUBSTRACTION RESULT AS NEW REMAINDER,
00513  0AEA  8C 9C 0A              STY REMAINDER
00514  0AED  EE 9A 0A              INC RESULT                  ; AND INCREMENT RESULT CAUSE DIVISOR FIT IN 1 TIMES
00515  0AF0  D0 03                 BNE SKIP
00516  0AF2  EE 9B 0A              INC RESULT+1
00517  0AF5             SKIP       
00518  0AF5  CA                    DEX
00519  0AF6  D0 D3                 BNE DIVLOOP
00520  0AF8                        
00521  0AF8                        ; PRINT RESULT
00522  0AF8  20 6D 09              JSR CARRAGERETURN           ; ADD A SCREEN LINE
00523  0AFB             
00524  0AFB             
00525  0AFB  A0 0A                 LDY #>THEANSWERISTXT
00526  0AFD  A9 6A                 LDA #<THEANSWERISTXT
00527  0AFF  20 72 09              JSR STRING
00528  0B02  AD 9B 0A              LDA RESULT+1
00529  0B05  AE 9A 0A              LDX RESULT                  ; LOAD X REGISTER TO DIVIDEND
00530  0B08  20 CD BD              JSR $BDCD                   ; JUMP TO BASIC DECIMAL NUMBER PRINT ROUTINE
00531  0B0B  20 6D 09              JSR CARRAGERETURN           ; ADD A SCREEN LINE
00532  0B0E             
00533  0B0E             
00534  0B0E  A0 0A                 LDY #>WITHREMAINDERTXT
00535  0B10  A9 7F                 LDA #<WITHREMAINDERTXT
00536  0B12  20 72 09              JSR STRING
00537  0B15  AD 9D 0A              LDA REMAINDER + 1           ; LOAD REMAINDER
00538  0B18  AE 9C 0A              LDX REMAINDER
00539  0B1B  20 CD BD              JSR $BDCD                   ; JUMP TO BASIC DECIMAL NUMBER PRINT ROUTINE
00540  0B1E  68                    PLA
00541  0B1F  68                    PLA
00542  0B20  4C 74 A4              JMP $A474
00543  0B23  60                    RTS
00544  0B24             
00545  0B24             
00546  0B24             

******* 43 Label(s) *******
binpr4 = $09D3 
BinPrint = $09C8 
CarrageReturn = $096D 
DecimalPrint = $09E3 
divide = $0A9E 
dividend = $0A9A 
divisor = $0A98 
divloop = $0ACB 
EnterDividerTXT = $0A4E 
EnterNumberTXT = $0A37 
Get16BitNumber = $0915 
GetNumber = $0903 
HexadecimalPrint = $0A0B 
NumberToPrint = $092F 
NumberToWork = $0930 
pbyte = $0A2B 
pbyte_skip = $0A32 
pbyte1 = $0A1F 
pbyte2 = $0A19 
prBracketClosed = $09F7 
prBracketOpen = $09F4 
prComma = $09FA 
prDollar = $09F1 
prHash = $0A06 
PrintAccumlator = $0931 
prPercent = $0A03 
prx = $09FD 
pry = $0A00 
remainder = $0A9C 
rgtxt = $098C 
skip = $0AF5 
space = $0968 
status_register = $09AD 
StatusState = $092E 
streg = $09AC 
streg1 = $09AF 
streg2 = $09BF 
streg3 = $09B2 
String = $0972 
string_nxtchr = $0976 
string_rts = $098B 
TheAnswerIsTXT = $0A6A 
WithRemainderTXT = $0A7F 

******* 8 Unused label(s) *******
divide
prBracketClosed
prBracketOpen
prComma
PrintAccumlator
prx
pry
streg1

******* 36 Variable(s) *******
addhi  = $00F8
addlo  = $00F7
Basin  = $FFCF
CHR_Black  = $0090
CHR_Blue  = $001F
CHR_ClearScreen  = $0093
CHR_CursorDown  = $0091
CHR_CursorLeft  = $009D
CHR_CursorRight  = $001D
CHR_CursorUp  = $0011
CHR_Cyan  = $009F
CHR_DisableCommodoreKey  = $0008
CHR_EnableCommodoreKey  = $0009
CHR_Green  = $001E
CHR_Home  = $0013
CHR_Insert  = $0094
CHR_Overwrite  = $0014
CHR_Purple  = $009C
CHR_Red  = $001C
CHR_Return  = $000D
CHR_ReverseOff  = $0092
CHR_ReverseOn  = $0012
CHR_ShiftReturn  = $008D
CHR_ShiftSpace  = $00A0
CHR_Space  = $0020
CHR_SwitchToLowerCase  = $000E
CHR_SwitchToUpperCase  = $008E
CHR_White  = $0005
CHR_Yellow  = $009E
FromNum  = $B79E
GetLine  = $A560
hthi  = $0015
htlo  = $0014
Print  = $FFD2
result  = $0A9A
tgt_c64  = $0001
******* 29 Unused variables(s) *******
addhi
addlo
Basin
CHR_Black
CHR_Blue
CHR_ClearScreen
CHR_CursorDown
CHR_CursorLeft
CHR_CursorRight
CHR_CursorUp
CHR_Cyan
CHR_DisableCommodoreKey
CHR_EnableCommodoreKey
CHR_Green
CHR_Home
CHR_Insert
CHR_Overwrite
CHR_Purple
CHR_Red
CHR_ReverseOff
CHR_ReverseOn
CHR_ShiftReturn
CHR_ShiftSpace
CHR_SwitchToLowerCase
CHR_SwitchToUpperCase
CHR_White
CHR_Yellow
FromNum
tgt_c64

